2025-08-19T09:49:32.616414591Z Warning message:
2025-08-19T09:49:32.616497510Z renv 0.16.0 was loaded from project library, but this project is configured to use renv ${VERSION}.
2025-08-19T09:49:32.616509453Z Use `renv::record("renv@0.16.0")` to record renv 0.16.0 in the lockfile.
2025-08-19T09:49:32.616516025Z Use `renv::restore(packages = "renv")` to install renv ${VERSION} into the project library. 
2025-08-19T09:49:32.699991004Z [1] "Load packages"
2025-08-19T09:49:33.451567172Z 
2025-08-19T09:49:33.451610340Z Attaching package: ‘lubridate’
2025-08-19T09:49:33.451614803Z 
2025-08-19T09:49:33.452666891Z The following objects are masked from ‘package:data.table’:
2025-08-19T09:49:33.452692930Z 
2025-08-19T09:49:33.452696560Z     hour, isoweek, mday, minute, month, quarter, second, wday, week,
2025-08-19T09:49:33.452700499Z     yday, year
2025-08-19T09:49:33.452703155Z 
2025-08-19T09:49:33.452868913Z The following objects are masked from ‘package:base’:
2025-08-19T09:49:33.452873207Z 
2025-08-19T09:49:33.452875848Z     date, intersect, setdiff, union
2025-08-19T09:49:33.452878610Z 
2025-08-19T09:49:33.453447703Z [1] "Source functions"
2025-08-19T09:49:33.455161096Z [[1]]
2025-08-19T09:49:33.455187640Z [[1]]$value
2025-08-19T09:49:33.455827294Z function (df) 
2025-08-19T09:49:33.455845932Z {
2025-08-19T09:49:33.455849573Z     if (nrow(df) != nrow(df[!is.na(df$patient_id), ])) {
2025-08-19T09:49:33.455852790Z         stop("Patient ID is not present for everyone in the dataset")
2025-08-19T09:49:33.455856179Z     }
2025-08-19T09:49:33.455859098Z     for (i in c("index_date", "exp_date", "out_date")) {
2025-08-19T09:49:33.455862666Z         if (!(i %in% colnames(df))) {
2025-08-19T09:49:33.455866004Z             stop(paste0(i, " is not in dataset"))
2025-08-19T09:49:33.455869235Z         }
2025-08-19T09:49:33.455872042Z         else {
2025-08-19T09:49:33.455874859Z             if (sapply(df[, i], lubridate::is.Date) == FALSE) {
2025-08-19T09:49:33.455877859Z                 stop(paste0(i, " does not have a date format"))
2025-08-19T09:49:33.455880848Z             }
2025-08-19T09:49:33.455883501Z         }
2025-08-19T09:49:33.455886179Z     }
2025-08-19T09:49:33.455888755Z     if (!("strat_cat_region" %in% colnames(df))) {
2025-08-19T09:49:33.455891895Z         stop("strat_cat_region is not in dataset")
2025-08-19T09:49:33.455894830Z     }
2025-08-19T09:49:33.455897468Z     for (i in colnames(df)[grepl("cov_bin_", colnames(df))]) {
2025-08-19T09:49:33.455900645Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-08-19T09:49:33.455929058Z             stop(paste0(i, " is not a factor"))
2025-08-19T09:49:33.455932071Z         }
2025-08-19T09:49:33.455934495Z         else {
2025-08-19T09:49:33.455937179Z             if (length(sapply(df[, i], levels)) != 2) {
2025-08-19T09:49:33.455939978Z                 stop(paste0(i, " does not have two levels (levels = ", 
2025-08-19T09:49:33.455943048Z                   length(sapply(df[, i], levels)), ")"))
2025-08-19T09:49:33.455945900Z             }
2025-08-19T09:49:33.455948477Z         }
2025-08-19T09:49:33.455950937Z     }
2025-08-19T09:49:33.455953277Z     for (i in colnames(df)[grepl("cov_cat_", colnames(df))]) {
2025-08-19T09:49:33.455956149Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-08-19T09:49:33.455958840Z             stop(paste0(i, " is not a factor"))
2025-08-19T09:49:33.455961634Z         }
2025-08-19T09:49:33.455964058Z     }
2025-08-19T09:49:33.455966426Z }
2025-08-19T09:49:33.455968735Z 
2025-08-19T09:49:33.455971140Z [[1]]$visible
2025-08-19T09:49:33.455973676Z [1] FALSE
2025-08-19T09:49:33.455975998Z 
2025-08-19T09:49:33.455978272Z 
2025-08-19T09:49:33.455980583Z [[2]]
2025-08-19T09:49:33.455982953Z [[2]]$value
2025-08-19T09:49:33.457026457Z function (name) 
2025-08-19T09:49:33.457099122Z {
2025-08-19T09:49:33.457108209Z     print("Load active analyses")
2025-08-19T09:49:33.457113058Z     active_analyses <- readr::read_rds("lib/active_analyses.rds")
2025-08-19T09:49:33.457118074Z     print("Filter active_analyses to model inputs to be prepared")
2025-08-19T09:49:33.457122181Z     active_analyses <- active_analyses[active_analyses$name == 
2025-08-19T09:49:33.457126151Z         name, ]
2025-08-19T09:49:33.457129855Z     if (nrow(active_analyses) == 0) {
2025-08-19T09:49:33.457133554Z         stop(paste0("Input: ", name, " does not match any analyses"))
2025-08-19T09:49:33.457137622Z     }
2025-08-19T09:49:33.457141054Z     print(paste0("Load data for ", active_analyses$name))
2025-08-19T09:49:33.457144938Z     input <- readr::read_rds(paste0("output/dataset_clean/input_", 
2025-08-19T09:49:33.457149019Z         active_analyses$cohort, "_clean.rds"))
2025-08-19T09:49:33.457152778Z     print("Restrict to required variables for dataset preparation")
2025-08-19T09:49:33.457156797Z     reqvars <- unique(c("patient_id", "index_date", "end_date_exposure", 
2025-08-19T09:49:33.457164816Z         "end_date_outcome", active_analyses$exposure, active_analyses$outcome, 
2025-08-19T09:49:33.457168813Z         active_analyses$strata, active_analyses$covariate_age, 
2025-08-19T09:49:33.457185666Z         "cov_cat_sex", "cov_cat_ethnicity", "cov_cat_smoking", 
2025-08-19T09:49:33.457190675Z         unlist(strsplit(active_analyses$covariate_other, split = ";")), 
2025-08-19T09:49:33.457194782Z         c(grep("sub_", colnames(input), value = TRUE)), "sup_bin_preex"))
2025-08-19T09:49:33.457199124Z     input <- input[, intersect(reqvars, colnames(input))]
2025-08-19T09:49:33.457203151Z     if (length(setdiff(reqvars, colnames(input))) > 0) {
2025-08-19T09:49:33.457207078Z         message("Variables (", setdiff(reqvars, colnames(input)), 
2025-08-19T09:49:33.457210962Z             ") not present in dataset")
2025-08-19T09:49:33.457214804Z     }
2025-08-19T09:49:33.457218358Z     print("Identify final list of variables to keep")
2025-08-19T09:49:33.457222233Z     keep <- c("patient_id", "index_date", "end_date_exposure", 
2025-08-19T09:49:33.457226404Z         "end_date_outcome", "exp_date", "out_date")
2025-08-19T09:49:33.457230391Z     varlists <- c("strata", "covariate_age", "covariate_sex", 
2025-08-19T09:49:33.457234520Z         "covariate_other")
2025-08-19T09:49:33.457238348Z     for (j in varlists) {
2025-08-19T09:49:33.457242015Z         if (active_analyses[, j] != "NULL") {
2025-08-19T09:49:33.457245957Z             keep <- c(keep, stringr::str_split(as.vector(active_analyses[, 
2025-08-19T09:49:33.457249903Z                 j]), ";")[[1]])
2025-08-19T09:49:33.457253727Z         }
2025-08-19T09:49:33.457257247Z     }
2025-08-19T09:49:33.457260798Z     input <- dplyr::rename(input, out_date = active_analyses$outcome, 
2025-08-19T09:49:33.457264630Z         exp_date = active_analyses$exposure)
2025-08-19T09:49:33.457268357Z     print("Remove outcomes outside of follow-up time")
2025-08-19T09:49:33.457272252Z     input <- input %>% dplyr::mutate(out_date = replace(out_date, 
2025-08-19T09:49:33.457276296Z         which(out_date > end_date_outcome | out_date < index_date), 
2025-08-19T09:49:33.457281864Z         NA), exp_date = replace(exp_date, which(exp_date > end_date_exposure | 
2025-08-19T09:49:33.457286101Z         exp_date < index_date), NA), sub_cat_covidhospital = replace(sub_cat_covidhospital, 
2025-08-19T09:49:33.457290100Z         which(is.na(exp_date)), "no_infection"))
2025-08-19T09:49:33.457294012Z     print("Update end date to be outcome date where applicable")
2025-08-19T09:49:33.457297997Z     input <- input %>% dplyr::rowwise() %>% dplyr::mutate(end_date_outcome = min(end_date_outcome, 
2025-08-19T09:49:33.457302570Z         out_date, na.rm = TRUE)) %>% dplyr::ungroup()
2025-08-19T09:49:33.457306526Z     return(list(input = input, keep = keep))
2025-08-19T09:49:33.457310213Z }
2025-08-19T09:49:33.457318046Z 
2025-08-19T09:49:33.457322065Z [[2]]$visible
2025-08-19T09:49:33.457325688Z [1] FALSE
2025-08-19T09:49:33.457329396Z 
2025-08-19T09:49:33.457332749Z 
2025-08-19T09:49:33.457336163Z [1] "Specify arguments"
2025-08-19T09:49:33.458164121Z [1] "Creating output/model output folder"
2025-08-19T09:49:33.547168969Z [1] "Load and prepare data for analysis"
2025-08-19T09:49:33.636413490Z [1] "Load active analyses"
2025-08-19T09:49:34.208153275Z [1] "Filter active_analyses to model inputs to be prepared"
2025-08-19T09:49:34.208732630Z [1] "Load data for cohort_prevax-main-stroke_sahhs"
2025-08-19T09:49:34.224744594Z [1] "Restrict to required variables for dataset preparation"
2025-08-19T09:49:34.228336069Z Variables (sup_bin_preex) not present in dataset
2025-08-19T09:49:34.228336364Z [1] "Identify final list of variables to keep"
2025-08-19T09:49:34.700134589Z [1] "Remove outcomes outside of follow-up time"
2025-08-19T09:49:34.810146934Z [1] "Update end date to be outcome date where applicable"
2025-08-19T09:49:35.285483961Z Warning messages:
2025-08-19T09:49:35.285556015Z 1: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘tibble’ 
2025-08-19T09:49:35.285570131Z 2: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘tibble’ 
2025-08-19T09:49:35.285579462Z 3: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘tibble’ 
2025-08-19T09:49:35.285587799Z 4: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘pillar’ 
2025-08-19T09:49:35.285594921Z 5: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘pillar’ 
2025-08-19T09:49:35.285602240Z 6: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘pillar’ 
2025-08-19T09:49:35.285595386Z [1] "Restrict to required population"
2025-08-19T09:49:35.286613481Z [1] "Perform subgroup-specific manipulation"
2025-08-19T09:49:35.286763884Z [1] "Make model input: main-stroke_sahhs"
2025-08-19T09:49:35.419285064Z [1] "Saved: output/model/model_input-cohort_prevax-main-stroke_sahhs.rds"


job_definition_id: dngtpzs37c2c2p6z
job_definition_request_id: 170099df16
docker_image_id: sha256:ef02d2a106a19e7d6a5d5a9b895969058ce5a89c6535f13c96d1d73fe995c657
exit_code: 0
created_at: 1755596732
completed_at: 1755596976
status_message: Completed successfully

outputs:
  output/model/model_input-cohort_prevax-main-stroke_sahhs.rds  - highly_sensitive
