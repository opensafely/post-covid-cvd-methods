2025-07-28T13:39:07.341830656Z Warning message:
2025-07-28T13:39:07.341873829Z renv 0.16.0 was loaded from project library, but this project is configured to use renv ${VERSION}.
2025-07-28T13:39:07.341878298Z Use `renv::record("renv@0.16.0")` to record renv 0.16.0 in the lockfile.
2025-07-28T13:39:07.341880933Z Use `renv::restore(packages = "renv")` to install renv ${VERSION} into the project library. 
2025-07-28T13:39:07.364862305Z [1] "Load packages"
2025-07-28T13:39:07.571455425Z 
2025-07-28T13:39:07.571482202Z Attaching package: ‘lubridate’
2025-07-28T13:39:07.571485490Z 
2025-07-28T13:39:07.571654654Z The following objects are masked from ‘package:data.table’:
2025-07-28T13:39:07.571658992Z 
2025-07-28T13:39:07.571660647Z     hour, isoweek, mday, minute, month, quarter, second, wday, week,
2025-07-28T13:39:07.571662535Z     yday, year
2025-07-28T13:39:07.571664011Z 
2025-07-28T13:39:07.571803878Z The following objects are masked from ‘package:base’:
2025-07-28T13:39:07.571806830Z 
2025-07-28T13:39:07.571808430Z     date, intersect, setdiff, union
2025-07-28T13:39:07.571809982Z 
2025-07-28T13:39:07.571817354Z [1] "Source functions"
2025-07-28T13:39:07.572502716Z [[1]]
2025-07-28T13:39:07.572507640Z [[1]]$value
2025-07-28T13:39:07.572576870Z function (df) 
2025-07-28T13:39:07.572579736Z {
2025-07-28T13:39:07.572581350Z     if (nrow(df) != nrow(df[!is.na(df$patient_id), ])) {
2025-07-28T13:39:07.572583000Z         stop("Patient ID is not present for everyone in the dataset")
2025-07-28T13:39:07.572584640Z     }
2025-07-28T13:39:07.572586032Z     for (i in c("index_date", "exp_date", "out_date")) {
2025-07-28T13:39:07.572587680Z         if (!(i %in% colnames(df))) {
2025-07-28T13:39:07.572589086Z             stop(paste0(i, " is not in dataset"))
2025-07-28T13:39:07.572590763Z         }
2025-07-28T13:39:07.572592239Z         else {
2025-07-28T13:39:07.572593687Z             if (sapply(df[, i], lubridate::is.Date) == FALSE) {
2025-07-28T13:39:07.572595266Z                 stop(paste0(i, " does not have a date format"))
2025-07-28T13:39:07.572596857Z             }
2025-07-28T13:39:07.572598289Z         }
2025-07-28T13:39:07.572599761Z     }
2025-07-28T13:39:07.572601189Z     if (!("strat_cat_region" %in% colnames(df))) {
2025-07-28T13:39:07.572602766Z         stop("strat_cat_region is not in dataset")
2025-07-28T13:39:07.572604411Z     }
2025-07-28T13:39:07.572605828Z     for (i in colnames(df)[grepl("cov_bin_", colnames(df))]) {
2025-07-28T13:39:07.572607636Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-07-28T13:39:07.572620499Z             stop(paste0(i, " is not a factor"))
2025-07-28T13:39:07.572622560Z         }
2025-07-28T13:39:07.572624044Z         else {
2025-07-28T13:39:07.572625488Z             if (length(sapply(df[, i], levels)) != 2) {
2025-07-28T13:39:07.572626968Z                 stop(paste0(i, " does not have two levels (levels = ", 
2025-07-28T13:39:07.572628510Z                   length(sapply(df[, i], levels)), ")"))
2025-07-28T13:39:07.572630072Z             }
2025-07-28T13:39:07.572631633Z         }
2025-07-28T13:39:07.572632976Z     }
2025-07-28T13:39:07.572634312Z     for (i in colnames(df)[grepl("cov_cat_", colnames(df))]) {
2025-07-28T13:39:07.572635769Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-07-28T13:39:07.572637188Z             stop(paste0(i, " is not a factor"))
2025-07-28T13:39:07.572638657Z         }
2025-07-28T13:39:07.572640031Z     }
2025-07-28T13:39:07.572641357Z }
2025-07-28T13:39:07.572642749Z 
2025-07-28T13:39:07.572644071Z [[1]]$visible
2025-07-28T13:39:07.572645445Z [1] FALSE
2025-07-28T13:39:07.572646783Z 
2025-07-28T13:39:07.572648125Z 
2025-07-28T13:39:07.572649458Z [[2]]
2025-07-28T13:39:07.572650871Z [[2]]$value
2025-07-28T13:39:07.572993813Z function (name) 
2025-07-28T13:39:07.573012728Z {
2025-07-28T13:39:07.573014896Z     print("Load active analyses")
2025-07-28T13:39:07.573016630Z     active_analyses <- readr::read_rds("lib/active_analyses.rds")
2025-07-28T13:39:07.573018500Z     print("Filter active_analyses to model inputs to be prepared")
2025-07-28T13:39:07.573020148Z     active_analyses <- active_analyses[active_analyses$name == 
2025-07-28T13:39:07.573021742Z         name, ]
2025-07-28T13:39:07.573023137Z     if (nrow(active_analyses) == 0) {
2025-07-28T13:39:07.573024705Z         stop(paste0("Input: ", name, " does not match any analyses"))
2025-07-28T13:39:07.573026371Z     }
2025-07-28T13:39:07.573027833Z     print(paste0("Load data for ", active_analyses$name))
2025-07-28T13:39:07.573029567Z     input <- readr::read_rds(paste0("output/dataset_clean/input_", 
2025-07-28T13:39:07.573031231Z         active_analyses$cohort, "_clean.rds"))
2025-07-28T13:39:07.573032786Z     print("Restrict to required variables for dataset preparation")
2025-07-28T13:39:07.573034513Z     reqvars <- unique(c("patient_id", "index_date", "end_date_exposure", 
2025-07-28T13:39:07.573036329Z         "end_date_outcome", active_analyses$exposure, active_analyses$outcome, 
2025-07-28T13:39:07.573038059Z         active_analyses$strata, active_analyses$covariate_age, 
2025-07-28T13:39:07.573054810Z         "cov_cat_sex", "cov_cat_ethnicity", "cov_cat_smoking", 
2025-07-28T13:39:07.573058161Z         unlist(strsplit(active_analyses$covariate_other, split = ";")), 
2025-07-28T13:39:07.573059918Z         c(grep("sub_", colnames(input), value = TRUE)), "sup_bin_preex"))
2025-07-28T13:39:07.573061757Z     input <- input[, intersect(reqvars, colnames(input))]
2025-07-28T13:39:07.573063418Z     if (length(setdiff(reqvars, colnames(input))) > 0) {
2025-07-28T13:39:07.573065060Z         message("Variables (", setdiff(reqvars, colnames(input)), 
2025-07-28T13:39:07.573066755Z             ") not present in dataset")
2025-07-28T13:39:07.573068394Z     }
2025-07-28T13:39:07.573069864Z     print("Identify final list of variables to keep")
2025-07-28T13:39:07.573071480Z     keep <- c("patient_id", "index_date", "end_date_exposure", 
2025-07-28T13:39:07.573073236Z         "end_date_outcome", "exp_date", "out_date")
2025-07-28T13:39:07.573074917Z     varlists <- c("strata", "covariate_age", "covariate_sex", 
2025-07-28T13:39:07.573076720Z         "covariate_other")
2025-07-28T13:39:07.573078249Z     for (j in varlists) {
2025-07-28T13:39:07.573079765Z         if (active_analyses[, j] != "NULL") {
2025-07-28T13:39:07.573081398Z             keep <- c(keep, stringr::str_split(as.vector(active_analyses[, 
2025-07-28T13:39:07.573083530Z                 j]), ";")[[1]])
2025-07-28T13:39:07.573085130Z         }
2025-07-28T13:39:07.573086650Z     }
2025-07-28T13:39:07.573088158Z     input <- dplyr::rename(input, out_date = active_analyses$outcome, 
2025-07-28T13:39:07.573089767Z         exp_date = active_analyses$exposure)
2025-07-28T13:39:07.573091285Z     print("Remove outcomes outside of follow-up time")
2025-07-28T13:39:07.573092870Z     input <- input %>% dplyr::mutate(out_date = replace(out_date, 
2025-07-28T13:39:07.573094555Z         which(out_date > end_date_outcome | out_date < index_date), 
2025-07-28T13:39:07.573097329Z         NA), exp_date = replace(exp_date, which(exp_date > end_date_exposure | 
2025-07-28T13:39:07.573099249Z         exp_date < index_date), NA), sub_cat_covidhospital = replace(sub_cat_covidhospital, 
2025-07-28T13:39:07.573100928Z         which(is.na(exp_date)), "no_infection"))
2025-07-28T13:39:07.573102536Z     print("Update end date to be outcome date where applicable")
2025-07-28T13:39:07.573104168Z     input <- input %>% dplyr::rowwise() %>% dplyr::mutate(end_date_outcome = min(end_date_outcome, 
2025-07-28T13:39:07.573105926Z         out_date, na.rm = TRUE)) %>% dplyr::ungroup()
2025-07-28T13:39:07.573107548Z     return(list(input = input, keep = keep))
2025-07-28T13:39:07.573109092Z }
2025-07-28T13:39:07.573114262Z 
2025-07-28T13:39:07.573116366Z [[2]]$visible
2025-07-28T13:39:07.573117917Z [1] FALSE
2025-07-28T13:39:07.573119416Z 
2025-07-28T13:39:07.573120924Z 
2025-07-28T13:39:07.573122378Z [1] "Specify arguments"
2025-07-28T13:39:07.573277047Z [1] "Creating output/model output folder"
2025-07-28T13:39:07.598651762Z [1] "Load and prepare data for analysis"
2025-07-28T13:39:07.620273981Z [1] "Load active analyses"
2025-07-28T13:39:07.770856282Z [1] "Filter active_analyses to model inputs to be prepared"
2025-07-28T13:39:07.770876704Z [1] "Load data for cohort_prevax-main-stroke_sahhs"
2025-07-28T13:39:07.774640183Z [1] "Restrict to required variables for dataset preparation"
2025-07-28T13:39:07.775523648Z Variables (sup_bin_preex) not present in dataset
2025-07-28T13:39:07.775546665Z [1] "Identify final list of variables to keep"
2025-07-28T13:39:07.859740974Z [1] "Remove outcomes outside of follow-up time"
2025-07-28T13:39:07.882123835Z [1] "Update end date to be outcome date where applicable"
2025-07-28T13:39:08.028171627Z [1] "Restrict to required population"
2025-07-28T13:39:08.028202761Z Warning messages:
2025-07-28T13:39:08.028204166Z 1: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘tibble’ 
2025-07-28T13:39:08.028205914Z 2: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘tibble’ 
2025-07-28T13:39:08.028207003Z 3: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘tibble’ 
2025-07-28T13:39:08.028208083Z 4: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘pillar’ 
2025-07-28T13:39:08.028209153Z 5: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘pillar’ 
2025-07-28T13:39:08.028211307Z 6: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘pillar’ 
2025-07-28T13:39:08.028384517Z [1] "Perform subgroup-specific manipulation"
2025-07-28T13:39:08.028394866Z [1] "Make model input: main-stroke_sahhs"
2025-07-28T13:39:08.068183658Z [1] "Saved: output/model/model_input-cohort_prevax-main-stroke_sahhs.rds"


job_definition_id: d6xxnwhrd4n2oop2
job_definition_request_id: 4204ecd689
docker_image_id: sha256:ef02d2a106a19e7d6a5d5a9b895969058ce5a89c6535f13c96d1d73fe995c657
exit_code: 0
created_at: 1753709846
completed_at: 1753709949
status_message: Completed successfully

outputs:
  output/model/model_input-cohort_prevax-main-stroke_sahhs.rds  - highly_sensitive
