2025-07-28T13:38:58.344611244Z Warning message:
2025-07-28T13:38:58.344654635Z renv 0.16.0 was loaded from project library, but this project is configured to use renv ${VERSION}.
2025-07-28T13:38:58.344659672Z Use `renv::record("renv@0.16.0")` to record renv 0.16.0 in the lockfile.
2025-07-28T13:38:58.344662498Z Use `renv::restore(packages = "renv")` to install renv ${VERSION} into the project library. 
2025-07-28T13:38:58.383367337Z [1] "Load packages"
2025-07-28T13:38:58.623303361Z 
2025-07-28T13:38:58.623328333Z Attaching package: ‘lubridate’
2025-07-28T13:38:58.623331288Z 
2025-07-28T13:38:58.623570543Z The following objects are masked from ‘package:data.table’:
2025-07-28T13:38:58.623577216Z 
2025-07-28T13:38:58.623579623Z     hour, isoweek, mday, minute, month, quarter, second, wday, week,
2025-07-28T13:38:58.623581426Z     yday, year
2025-07-28T13:38:58.623582905Z 
2025-07-28T13:38:58.623584266Z The following objects are masked from ‘package:base’:
2025-07-28T13:38:58.623585782Z 
2025-07-28T13:38:58.623587180Z     date, intersect, setdiff, union
2025-07-28T13:38:58.623588630Z 
2025-07-28T13:38:58.623743774Z [1] "Source functions"
2025-07-28T13:38:58.624414889Z [[1]]
2025-07-28T13:38:58.624433282Z [[1]]$value
2025-07-28T13:38:58.624451740Z function (df) 
2025-07-28T13:38:58.624460785Z {
2025-07-28T13:38:58.624461907Z     if (nrow(df) != nrow(df[!is.na(df$patient_id), ])) {
2025-07-28T13:38:58.624462891Z         stop("Patient ID is not present for everyone in the dataset")
2025-07-28T13:38:58.624464195Z     }
2025-07-28T13:38:58.624465141Z     for (i in c("index_date", "exp_date", "out_date")) {
2025-07-28T13:38:58.624466420Z         if (!(i %in% colnames(df))) {
2025-07-28T13:38:58.624467381Z             stop(paste0(i, " is not in dataset"))
2025-07-28T13:38:58.624468467Z         }
2025-07-28T13:38:58.624469374Z         else {
2025-07-28T13:38:58.624470242Z             if (sapply(df[, i], lubridate::is.Date) == FALSE) {
2025-07-28T13:38:58.624471176Z                 stop(paste0(i, " does not have a date format"))
2025-07-28T13:38:58.624472167Z             }
2025-07-28T13:38:58.624473023Z         }
2025-07-28T13:38:58.624473858Z     }
2025-07-28T13:38:58.624474672Z     if (!("strat_cat_region" %in% colnames(df))) {
2025-07-28T13:38:58.624475698Z         stop("strat_cat_region is not in dataset")
2025-07-28T13:38:58.624476619Z     }
2025-07-28T13:38:58.624477455Z     for (i in colnames(df)[grepl("cov_bin_", colnames(df))]) {
2025-07-28T13:38:58.624478444Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-07-28T13:38:58.624488696Z             stop(paste0(i, " is not a factor"))
2025-07-28T13:38:58.624489767Z         }
2025-07-28T13:38:58.624490642Z         else {
2025-07-28T13:38:58.624491500Z             if (length(sapply(df[, i], levels)) != 2) {
2025-07-28T13:38:58.624492445Z                 stop(paste0(i, " does not have two levels (levels = ", 
2025-07-28T13:38:58.624493432Z                   length(sapply(df[, i], levels)), ")"))
2025-07-28T13:38:58.624494409Z             }
2025-07-28T13:38:58.624495277Z         }
2025-07-28T13:38:58.624496169Z     }
2025-07-28T13:38:58.624496988Z     for (i in colnames(df)[grepl("cov_cat_", colnames(df))]) {
2025-07-28T13:38:58.624497953Z         if (sapply(df[, i], is.factor) == FALSE) {
2025-07-28T13:38:58.624498825Z             stop(paste0(i, " is not a factor"))
2025-07-28T13:38:58.624499739Z         }
2025-07-28T13:38:58.624500557Z     }
2025-07-28T13:38:58.624501360Z }
2025-07-28T13:38:58.624502184Z 
2025-07-28T13:38:58.624503055Z [[1]]$visible
2025-07-28T13:38:58.624503934Z [1] FALSE
2025-07-28T13:38:58.624504769Z 
2025-07-28T13:38:58.624505541Z 
2025-07-28T13:38:58.624506329Z [[2]]
2025-07-28T13:38:58.624507169Z [[2]]$value
2025-07-28T13:38:58.624911551Z function (name) 
2025-07-28T13:38:58.624918570Z {
2025-07-28T13:38:58.624920749Z     print("Load active analyses")
2025-07-28T13:38:58.624922478Z     active_analyses <- readr::read_rds("lib/active_analyses.rds")
2025-07-28T13:38:58.624924277Z     print("Filter active_analyses to model inputs to be prepared")
2025-07-28T13:38:58.624925865Z     active_analyses <- active_analyses[active_analyses$name == 
2025-07-28T13:38:58.624927389Z         name, ]
2025-07-28T13:38:58.624928786Z     if (nrow(active_analyses) == 0) {
2025-07-28T13:38:58.624930490Z         stop(paste0("Input: ", name, " does not match any analyses"))
2025-07-28T13:38:58.624932241Z     }
2025-07-28T13:38:58.624933578Z     print(paste0("Load data for ", active_analyses$name))
2025-07-28T13:38:58.624935108Z     input <- readr::read_rds(paste0("output/dataset_clean/input_", 
2025-07-28T13:38:58.624936698Z         active_analyses$cohort, "_clean.rds"))
2025-07-28T13:38:58.624938175Z     print("Restrict to required variables for dataset preparation")
2025-07-28T13:38:58.624939694Z     reqvars <- unique(c("patient_id", "index_date", "end_date_exposure", 
2025-07-28T13:38:58.624941398Z         "end_date_outcome", active_analyses$exposure, active_analyses$outcome, 
2025-07-28T13:38:58.624942917Z         active_analyses$strata, active_analyses$covariate_age, 
2025-07-28T13:38:58.624950801Z         "cov_cat_sex", "cov_cat_ethnicity", "cov_cat_smoking", 
2025-07-28T13:38:58.624952922Z         unlist(strsplit(active_analyses$covariate_other, split = ";")), 
2025-07-28T13:38:58.624954591Z         c(grep("sub_", colnames(input), value = TRUE)), "sup_bin_preex"))
2025-07-28T13:38:58.624956172Z     input <- input[, intersect(reqvars, colnames(input))]
2025-07-28T13:38:58.624957710Z     if (length(setdiff(reqvars, colnames(input))) > 0) {
2025-07-28T13:38:58.624959238Z         message("Variables (", setdiff(reqvars, colnames(input)), 
2025-07-28T13:38:58.624960747Z             ") not present in dataset")
2025-07-28T13:38:58.624962239Z     }
2025-07-28T13:38:58.624963599Z     print("Identify final list of variables to keep")
2025-07-28T13:38:58.624965051Z     keep <- c("patient_id", "index_date", "end_date_exposure", 
2025-07-28T13:38:58.624966645Z         "end_date_outcome", "exp_date", "out_date")
2025-07-28T13:38:58.624968191Z     varlists <- c("strata", "covariate_age", "covariate_sex", 
2025-07-28T13:38:58.624969861Z         "covariate_other")
2025-07-28T13:38:58.624971293Z     for (j in varlists) {
2025-07-28T13:38:58.624972684Z         if (active_analyses[, j] != "NULL") {
2025-07-28T13:38:58.624974175Z             keep <- c(keep, stringr::str_split(as.vector(active_analyses[, 
2025-07-28T13:38:58.624975692Z                 j]), ";")[[1]])
2025-07-28T13:38:58.624977203Z         }
2025-07-28T13:38:58.624978611Z     }
2025-07-28T13:38:58.624979999Z     input <- dplyr::rename(input, out_date = active_analyses$outcome, 
2025-07-28T13:38:58.624981485Z         exp_date = active_analyses$exposure)
2025-07-28T13:38:58.624982875Z     print("Remove outcomes outside of follow-up time")
2025-07-28T13:38:58.624984360Z     input <- input %>% dplyr::mutate(out_date = replace(out_date, 
2025-07-28T13:38:58.624985926Z         which(out_date > end_date_outcome | out_date < index_date), 
2025-07-28T13:38:58.624988055Z         NA), exp_date = replace(exp_date, which(exp_date > end_date_exposure | 
2025-07-28T13:38:58.624989744Z         exp_date < index_date), NA), sub_cat_covidhospital = replace(sub_cat_covidhospital, 
2025-07-28T13:38:58.624991350Z         which(is.na(exp_date)), "no_infection"))
2025-07-28T13:38:58.624992886Z     print("Update end date to be outcome date where applicable")
2025-07-28T13:38:58.624994432Z     input <- input %>% dplyr::rowwise() %>% dplyr::mutate(end_date_outcome = min(end_date_outcome, 
2025-07-28T13:38:58.624996075Z         out_date, na.rm = TRUE)) %>% dplyr::ungroup()
2025-07-28T13:38:58.624997584Z     return(list(input = input, keep = keep))
2025-07-28T13:38:58.624998988Z }
2025-07-28T13:38:58.625002107Z 
2025-07-28T13:38:58.625003686Z [[2]]$visible
2025-07-28T13:38:58.625005083Z [1] FALSE
2025-07-28T13:38:58.625006474Z 
2025-07-28T13:38:58.625007833Z 
2025-07-28T13:38:58.625009203Z [1] "Specify arguments"
2025-07-28T13:38:58.625133688Z [1] "Creating output/model output folder"
2025-07-28T13:38:58.650636402Z [1] "Load and prepare data for analysis"
2025-07-28T13:38:58.672229560Z [1] "Load active analyses"
2025-07-28T13:38:58.819159143Z [1] "Filter active_analyses to model inputs to be prepared"
2025-07-28T13:38:58.819177533Z [1] "Load data for cohort_prevax-main-ami"
2025-07-28T13:38:58.823060354Z [1] "Restrict to required variables for dataset preparation"
2025-07-28T13:38:58.824142744Z Variables (sup_bin_preex) not present in dataset
2025-07-28T13:38:58.824152796Z [1] "Identify final list of variables to keep"
2025-07-28T13:38:58.911798442Z [1] "Remove outcomes outside of follow-up time"
2025-07-28T13:38:58.932779294Z [1] "Update end date to be outcome date where applicable"
2025-07-28T13:38:59.080631181Z [1] "Restrict to required population"
2025-07-28T13:38:59.080683829Z Warning messages:
2025-07-28T13:38:59.080691652Z 1: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘tibble’ 
2025-07-28T13:38:59.080695037Z 2: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘tibble’ 
2025-07-28T13:38:59.080696956Z 3: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘tibble’ 
2025-07-28T13:38:59.080698810Z 4: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘pillar’ 
2025-07-28T13:38:59.080700644Z 5: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘pillar’ 
2025-07-28T13:38:59.080702491Z 6: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘pillar’ 
2025-07-28T13:38:59.080893828Z [1] "Perform subgroup-specific manipulation"
2025-07-28T13:38:59.080901228Z [1] "Make model input: main-ami"
2025-07-28T13:38:59.121412065Z [1] "Saved: output/model/model_input-cohort_prevax-main-ami.rds"


job_definition_id: chepbsv4gjm25sl2
job_definition_request_id: 4204ecd689
docker_image_id: sha256:ef02d2a106a19e7d6a5d5a9b895969058ce5a89c6535f13c96d1d73fe995c657
exit_code: 0
created_at: 1753709846
completed_at: 1753709940
status_message: Completed successfully

outputs:
  output/model/model_input-cohort_prevax-main-ami.rds  - highly_sensitive
