2025-07-28T13:38:49.022010859Z Warning message:
2025-07-28T13:38:49.022041117Z renv 0.16.0 was loaded from project library, but this project is configured to use renv ${VERSION}.
2025-07-28T13:38:49.022043706Z Use `renv::record("renv@0.16.0")` to record renv 0.16.0 in the lockfile.
2025-07-28T13:38:49.022045150Z Use `renv::restore(packages = "renv")` to install renv ${VERSION} into the project library. 
2025-07-28T13:38:49.051144443Z [1] "Load libraries"
2025-07-28T13:38:49.345351158Z 
2025-07-28T13:38:49.345380019Z Attaching package: ‘dplyr’
2025-07-28T13:38:49.345383462Z 
2025-07-28T13:38:49.345579364Z The following objects are masked from ‘package:stats’:
2025-07-28T13:38:49.345594695Z 
2025-07-28T13:38:49.345596320Z     filter, lag
2025-07-28T13:38:49.345597782Z 
2025-07-28T13:38:49.345722585Z The following objects are masked from ‘package:base’:
2025-07-28T13:38:49.345732065Z 
2025-07-28T13:38:49.345734291Z     intersect, setdiff, setequal, union
2025-07-28T13:38:49.345735948Z 
2025-07-28T13:38:49.345737389Z Warning messages:
2025-07-28T13:38:49.345738925Z 1: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘tibble’ 
2025-07-28T13:38:49.345754142Z 2: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘tibble’ 
2025-07-28T13:38:49.345756843Z 3: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘tibble’ 
2025-07-28T13:38:49.345758506Z 4: replacing previous import ‘ellipsis::check_dots_unnamed’ by ‘rlang::check_dots_unnamed’ when loading ‘pillar’ 
2025-07-28T13:38:49.345760190Z 5: replacing previous import ‘ellipsis::check_dots_used’ by ‘rlang::check_dots_used’ when loading ‘pillar’ 
2025-07-28T13:38:49.345761851Z 6: replacing previous import ‘ellipsis::check_dots_empty’ by ‘rlang::check_dots_empty’ when loading ‘pillar’ 
2025-07-28T13:38:49.798120416Z ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
2025-07-28T13:38:49.800584957Z ✔ ggplot2 3.4.2     ✔ purrr   0.3.4
2025-07-28T13:38:49.800596540Z ✔ tibble  3.0.3     ✔ stringr 1.4.0
2025-07-28T13:38:49.800598494Z ✔ tidyr   1.1.2     ✔ forcats 0.5.0
2025-07-28T13:38:49.800600230Z ✔ readr   1.3.1     
2025-07-28T13:38:49.853885456Z ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
2025-07-28T13:38:49.853909026Z ✖ dplyr::filter() masks stats::filter()
2025-07-28T13:38:49.853910280Z ✖ dplyr::lag()    masks stats::lag()
2025-07-28T13:38:49.859260948Z 
2025-07-28T13:38:49.859281107Z Attaching package: ‘lubridate’
2025-07-28T13:38:49.859297374Z 
2025-07-28T13:38:49.859367597Z The following objects are masked from ‘package:base’:
2025-07-28T13:38:49.859371598Z 
2025-07-28T13:38:49.859372927Z     date, intersect, setdiff, union
2025-07-28T13:38:49.859374152Z 
2025-07-28T13:38:49.893658915Z 
2025-07-28T13:38:49.893689315Z Attaching package: ‘data.table’
2025-07-28T13:38:49.893692021Z 
2025-07-28T13:38:49.893767073Z The following objects are masked from ‘package:lubridate’:
2025-07-28T13:38:49.893771923Z 
2025-07-28T13:38:49.893773292Z     hour, isoweek, mday, minute, month, quarter, second, wday, week,
2025-07-28T13:38:49.893774696Z     yday, year
2025-07-28T13:38:49.893775961Z 
2025-07-28T13:38:49.894215798Z The following object is masked from ‘package:purrr’:
2025-07-28T13:38:49.894224653Z 
2025-07-28T13:38:49.894225768Z     transpose
2025-07-28T13:38:49.894226657Z 
2025-07-28T13:38:49.894418367Z The following objects are masked from ‘package:dplyr’:
2025-07-28T13:38:49.894423915Z 
2025-07-28T13:38:49.894425015Z     between, first, last
2025-07-28T13:38:49.894425871Z 
2025-07-28T13:38:49.898246875Z 
2025-07-28T13:38:49.898256852Z Attaching package: ‘jsonlite’
2025-07-28T13:38:49.898258679Z 
2025-07-28T13:38:49.898259774Z The following object is masked from ‘package:purrr’:
2025-07-28T13:38:49.898261142Z 
2025-07-28T13:38:49.898262264Z     flatten
2025-07-28T13:38:49.898263823Z 
2025-07-28T13:38:49.904611115Z here() starts at /workspace
2025-07-28T13:38:49.911662327Z [1] "Creating output/dataset_clean output folder"
2025-07-28T13:38:49.913194789Z [1] "Specify redaction threshold"
2025-07-28T13:38:49.913205998Z [1] "Load json file containing vax study dates"
2025-07-28T13:38:49.914558806Z [1] "Specify relevant dates"
2025-07-28T13:38:49.916417089Z [1] "Source common functions"
2025-07-28T13:38:49.918492786Z [[1]]
2025-07-28T13:38:49.918501922Z [[1]]$value
2025-07-28T13:38:49.918946955Z function (input, flow, cohort, vax1_earliest, mixed_vax_threshold, 
2025-07-28T13:38:49.918953940Z     delta_date, lcd_date) 
2025-07-28T13:38:49.918955561Z {
2025-07-28T13:38:49.918956863Z     print("Apply inclusion criteria to all cohorts")
2025-07-28T13:38:49.918958352Z     input <- subset(input, inex_bin_alive == TRUE)
2025-07-28T13:38:49.918959881Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Alive at index", 
2025-07-28T13:38:49.918967504Z         nrow(input))
2025-07-28T13:38:49.918968782Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918970034Z     input <- subset(input, cov_num_age >= 18)
2025-07-28T13:38:49.918971598Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Known age 18 or over at index", 
2025-07-28T13:38:49.918973260Z         nrow(input))
2025-07-28T13:38:49.918974520Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918975850Z     input <- subset(input, cov_num_age <= 110)
2025-07-28T13:38:49.918977388Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Known age 110 or under at index", 
2025-07-28T13:38:49.918979267Z         nrow(input))
2025-07-28T13:38:49.918980157Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918981077Z     input <- subset(input, cov_cat_sex %in% c("female", "male"))
2025-07-28T13:38:49.918982214Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Known sex, recorded as male or female, at index", 
2025-07-28T13:38:49.918983270Z         nrow(input))
2025-07-28T13:38:49.918984173Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918985070Z     input <- subset(input, cov_cat_imd %in% c("1 (most deprived)", 
2025-07-28T13:38:49.918986121Z         "2", "3", "4", "5 (least deprived)"))
2025-07-28T13:38:49.918987236Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Known IMD at index", 
2025-07-28T13:38:49.918988270Z         nrow(input))
2025-07-28T13:38:49.918989128Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918989976Z     input <- subset(input, strat_cat_region %in% c("East", "East Midlands", 
2025-07-28T13:38:49.918991040Z         "London", "North East", "North West", "South East", "South West", 
2025-07-28T13:38:49.918992166Z         "West Midlands", "Yorkshire and The Humber"))
2025-07-28T13:38:49.918993190Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Known region at index", 
2025-07-28T13:38:49.918994239Z         nrow(input))
2025-07-28T13:38:49.918995069Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918995941Z     input <- subset(input, inex_bin_6m_reg == TRUE)
2025-07-28T13:38:49.918996909Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Continuous registration with the same practice for at least six months up to and including the index date", 
2025-07-28T13:38:49.918998036Z         nrow(input))
2025-07-28T13:38:49.918998917Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.918999775Z     input <- subset(input, index_date <= end_date_exposure)
2025-07-28T13:38:49.919000954Z     flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Index date is before cohort end date", 
2025-07-28T13:38:49.919002003Z         nrow(input))
2025-07-28T13:38:49.919002835Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.919004810Z     print("Apply cohort specific inclusion criteria")
2025-07-28T13:38:49.919005791Z     if (cohort == "vax") {
2025-07-28T13:38:49.919007214Z         input <- subset(input, !is.na(vax_date_covid_1) & !is.na(vax_date_covid_2) & 
2025-07-28T13:38:49.919008388Z             vax_date_covid_2 < lcd_date)
2025-07-28T13:38:49.919009395Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Record of two vaccination doses prior to the study end date", 
2025-07-28T13:38:49.919010454Z             nrow(input))
2025-07-28T13:38:49.919011344Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919012272Z         input <- subset(input, (is.na(vax_date_covid_1) | vax_date_covid_1 >= 
2025-07-28T13:38:49.919013257Z             vax1_earliest) & (is.na(vax_date_covid_2) | vax_date_covid_2 >= 
2025-07-28T13:38:49.919014250Z             vax1_earliest) & (is.na(vax_date_covid_3) | vax_date_covid_3 >= 
2025-07-28T13:38:49.919015210Z             vax1_earliest))
2025-07-28T13:38:49.919016101Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Did not receive a vaccination prior to 08-12-2020 (i.e., the start of the vaccination program)", 
2025-07-28T13:38:49.919017185Z             nrow(input))
2025-07-28T13:38:49.919018043Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919018966Z         input <- subset(input, vax_date_covid_2 >= vax_date_covid_1)
2025-07-28T13:38:49.919019933Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Did not receive a second dose vaccination before their first dose vaccination", 
2025-07-28T13:38:49.919020988Z             nrow(input))
2025-07-28T13:38:49.919021823Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919022676Z         input <- subset(input, (vax_date_covid_2 - vax_date_covid_1) >= 
2025-07-28T13:38:49.919023654Z             21)
2025-07-28T13:38:49.919024555Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Did not receive a second dose vaccination less than three weeks after their first dose", 
2025-07-28T13:38:49.919025647Z             nrow(input))
2025-07-28T13:38:49.919026581Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919027471Z         input <- input %>% mutate(AZ_date = case_when(vax_date_AstraZeneca_1 < 
2025-07-28T13:38:49.919028485Z             mixed_vax_threshold ~ 1, vax_date_AstraZeneca_2 < 
2025-07-28T13:38:49.919029415Z             mixed_vax_threshold ~ 1, vax_date_AstraZeneca_3 < 
2025-07-28T13:38:49.919030322Z             mixed_vax_threshold ~ 1, TRUE ~ 0), Moderna_date = case_when(vax_date_Moderna_1 < 
2025-07-28T13:38:49.919031302Z             mixed_vax_threshold ~ 1, vax_date_Moderna_2 < mixed_vax_threshold ~ 
2025-07-28T13:38:49.919032282Z             1, vax_date_Moderna_3 < mixed_vax_threshold ~ 1, 
2025-07-28T13:38:49.919033203Z             TRUE ~ 0), Pfizer_date = case_when(vax_date_Pfizer_1 < 
2025-07-28T13:38:49.919035141Z             mixed_vax_threshold ~ 1, vax_date_Pfizer_2 < mixed_vax_threshold ~ 
2025-07-28T13:38:49.919036113Z             1, vax_date_Pfizer_3 < mixed_vax_threshold ~ 1, TRUE ~ 
2025-07-28T13:38:49.919037187Z             0)) %>% rowwise() %>% mutate(vax_mixed = sum(c_across(c(AZ_date, 
2025-07-28T13:38:49.919038218Z             Moderna_date, Pfizer_date)), na.rm = TRUE)) %>% ungroup() %>% 
2025-07-28T13:38:49.919039242Z             dplyr::filter(vax_mixed < 2) %>% select(-AZ_date, 
2025-07-28T13:38:49.919040257Z             -Moderna_date, -Pfizer_date, -vax_mixed)
2025-07-28T13:38:49.919041168Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Did not receive a mixed vaccine products before 07-05-2021", 
2025-07-28T13:38:49.919042227Z             nrow(input))
2025-07-28T13:38:49.919043077Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919043956Z     }
2025-07-28T13:38:49.919044817Z     else if (cohort == "unvax") {
2025-07-28T13:38:49.919045753Z         input <- subset(input, (is.na(vax_date_covid_1) | vax_date_covid_1 >= 
2025-07-28T13:38:49.919046750Z             index_date) & (is.na(vax_date_covid_2) | vax_date_covid_2 >= 
2025-07-28T13:38:49.919047737Z             index_date) & (is.na(vax_date_covid_3) | vax_date_covid_3 >= 
2025-07-28T13:38:49.919048679Z             index_date))
2025-07-28T13:38:49.919049524Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Does not have a record of one or more vaccination prior to index date", 
2025-07-28T13:38:49.919050601Z             nrow(input))
2025-07-28T13:38:49.919051449Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919052305Z         input <- subset(input, vax_cat_jcvi_group %in% c("01", 
2025-07-28T13:38:49.919053303Z             "02", "03", "04", "05", "06", "07", "08", "09", "10", 
2025-07-28T13:38:49.919054379Z             "11", "12"))
2025-07-28T13:38:49.919055266Z         flow[nrow(flow) + 1, ] <- c("Inclusion criteria: Not missing JCVI group", 
2025-07-28T13:38:49.919056275Z             nrow(input))
2025-07-28T13:38:49.919057116Z         print(flow[nrow(flow), ])
2025-07-28T13:38:49.919057988Z     }
2025-07-28T13:38:49.919058790Z     return(list(input = input, flow = flow))
2025-07-28T13:38:49.919059661Z }
2025-07-28T13:38:49.919060442Z 
2025-07-28T13:38:49.919061266Z [[1]]$visible
2025-07-28T13:38:49.919062133Z [1] FALSE
2025-07-28T13:38:49.919062944Z 
2025-07-28T13:38:49.919063765Z 
2025-07-28T13:38:49.919064600Z [[2]]
2025-07-28T13:38:49.919065460Z [[2]]$value
2025-07-28T13:38:49.920295160Z function (df, cohort) 
2025-07-28T13:38:49.920307976Z {
2025-07-28T13:38:49.920309420Z     set.seed(1)
2025-07-28T13:38:49.920310671Z     pandemic_start <- as.Date(study_dates$pandemic_start, format = "%Y-%m-%d", 
2025-07-28T13:38:49.920312235Z         origin = "1970-01-01")
2025-07-28T13:38:49.920313597Z     if (cohort == "vax") {
2025-07-28T13:38:49.920314904Z         df <- df %>% mutate(vax_date_Pfizer_1 = as.Date(vax_date_eligible) + 
2025-07-28T13:38:49.920316234Z             days(round(rnorm(nrow(.), mean = 10, sd = 3))), vax_date_AstraZeneca_1 = as.Date(vax_date_eligible) + 
2025-07-28T13:38:49.920317610Z             days(round(rnorm(nrow(.), mean = 10, sd = 3))), vax_date_Moderna_1 = as.Date(vax_date_eligible) + 
2025-07-28T13:38:49.920318911Z             days(round(rnorm(nrow(.), mean = 10, sd = 3)))) %>% 
2025-07-28T13:38:49.920320144Z             mutate(vaccine_1_type = sample(x = c("Pfizer", "AstraZeneca", 
2025-07-28T13:38:49.920321536Z                 "Moderna", "None"), size = nrow(.), replace = TRUE, 
2025-07-28T13:38:49.920322833Z                 prob = c(0.4, 0.4, 0.05, 0.1)), missing_pfizer_2 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920324847Z                 p = 0.05), missing_az_2 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920325665Z                 p = 0.05), missing_moderna_2 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920326438Z                 p = 0.05), missing_pfizer_3 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920327240Z                 p = 0.9), missing_az_3 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920328039Z                 p = 0.9), missing_moderna_3 = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920328808Z                 p = 0.9)) %>% mutate(across(vax_date_Pfizer_1, 
2025-07-28T13:38:49.920329645Z             ~if_else(vaccine_1_type %in% "Pfizer", .x, NA_Date_))) %>% 
2025-07-28T13:38:49.920330486Z             mutate(across(vax_date_AstraZeneca_1, ~if_else(vaccine_1_type %in% 
2025-07-28T13:38:49.920331350Z                 "AstraZeneca", .x, NA_Date_))) %>% mutate(across(vax_date_Moderna_1, 
2025-07-28T13:38:49.920332240Z             ~if_else(vaccine_1_type %in% "Moderna", .x, NA_Date_))) %>% 
2025-07-28T13:38:49.920333107Z             mutate(across(matches("vax_date\\w+_1"), ~if_else(vaccine_1_type %in% 
2025-07-28T13:38:49.920334035Z                 "None", NA_Date_, .x))) %>% mutate(vax_date_covid_1 = pmin(vax_date_Pfizer_1, 
2025-07-28T13:38:49.920334915Z             vax_date_AstraZeneca_1, vax_date_Moderna_1, na.rm = T)) %>% 
2025-07-28T13:38:49.920335727Z             mutate(vax_date_Pfizer_2 = vax_date_Pfizer_1 + days(round(rnorm(nrow(.), 
2025-07-28T13:38:49.920336480Z                 mean = 10 * 7, sd = 3))), vax_date_AstraZeneca_2 = vax_date_AstraZeneca_1 + 
2025-07-28T13:38:49.920337269Z                 days(round(rnorm(nrow(.), mean = 10 * 7, sd = 3))), 
2025-07-28T13:38:49.920338446Z                 vax_date_Moderna_2 = vax_date_Moderna_1 + days(round(rnorm(nrow(.), 
2025-07-28T13:38:49.920340797Z                   mean = 10 * 7, sd = 3))), ) %>% mutate(vaccine_2_type = ifelse(runif(nrow(df), 
2025-07-28T13:38:49.920341685Z             0, 1) > 0.95 & vaccine_1_type != "None", sample(x = c("Pfizer", 
2025-07-28T13:38:49.920342665Z             "AstraZeneca", "Moderna", "None"), size = nrow(.), 
2025-07-28T13:38:49.920343587Z             replace = TRUE, prob = c(0.4, 0.4, 0.05, 0.1)), vaccine_1_type)) %>% 
2025-07-28T13:38:49.920344396Z             mutate(across(vax_date_Pfizer_2, ~if_else(vaccine_2_type %in% 
2025-07-28T13:38:49.920345202Z                 "Pfizer", .x, NA_Date_))) %>% mutate(across(vax_date_AstraZeneca_2, 
2025-07-28T13:38:49.920346065Z             ~if_else(vaccine_2_type %in% "AstraZeneca", .x, NA_Date_))) %>% 
2025-07-28T13:38:49.920346936Z             mutate(across(vax_date_Moderna_2, ~if_else(vaccine_2_type %in% 
2025-07-28T13:38:49.920347710Z                 "Moderna", .x, NA_Date_))) %>% mutate(across(matches("vax_date\\w+_2"), 
2025-07-28T13:38:49.920348618Z             ~if_else(vaccine_2_type %in% "None", NA_Date_, .x))) %>% 
2025-07-28T13:38:49.920349465Z             mutate(across(vax_date_Pfizer_2, ~if_else(missing_pfizer_2, 
2025-07-28T13:38:49.920350238Z                 NA_Date_, .x))) %>% mutate(across(vax_date_AstraZeneca_2, 
2025-07-28T13:38:49.920351044Z             ~if_else(missing_az_2, NA_Date_, .x))) %>% mutate(across(vax_date_Moderna_2, 
2025-07-28T13:38:49.920351919Z             ~if_else(missing_moderna_2, NA_Date_, .x))) %>% mutate(vax_date_covid_2 = pmin(vax_date_Pfizer_2, 
2025-07-28T13:38:49.920354008Z             vax_date_AstraZeneca_2, vax_date_Moderna_2, na.rm = T)) %>% 
2025-07-28T13:38:49.920354898Z             mutate(vaccine_3_type = ifelse(vaccine_2_type != 
2025-07-28T13:38:49.920355694Z                 "None", sample(x = c("Pfizer", "AstraZeneca", 
2025-07-28T13:38:49.920356551Z                 "Moderna", "None"), size = nrow(.), replace = TRUE, 
2025-07-28T13:38:49.920357399Z                 prob = c(0.6, 0.1, 0.3, 0.1)), vaccine_2_type)) %>% 
2025-07-28T13:38:49.920358181Z             mutate(vax_date_Pfizer_3 = vax_date_Pfizer_2 + days(round(rnorm(nrow(.), 
2025-07-28T13:38:49.920358988Z                 mean = 6 * 4 * 7, sd = 7))), vax_date_AstraZeneca_3 = vax_date_AstraZeneca_2 + 
2025-07-28T13:38:49.920359792Z                 days(round(rnorm(nrow(.), mean = 6 * 4 * 7, sd = 7))), 
2025-07-28T13:38:49.920360598Z                 vax_date_Moderna_3 = vax_date_Moderna_2 + days(round(rnorm(nrow(.), 
2025-07-28T13:38:49.920361444Z                   mean = 6 * 4 * 7, sd = 7))), ) %>% mutate(across(vax_date_Pfizer_3, 
2025-07-28T13:38:49.920362303Z             ~if_else(vaccine_3_type %in% "Pfizer", .x, NA_Date_))) %>% 
2025-07-28T13:38:49.920363276Z             mutate(across(vax_date_AstraZeneca_3, ~if_else(vaccine_3_type %in% 
2025-07-28T13:38:49.920365117Z                 "AstraZeneca", .x, NA_Date_))) %>% mutate(across(vax_date_Moderna_3, 
2025-07-28T13:38:49.920365984Z             ~if_else(vaccine_3_type %in% "Moderna", .x, NA_Date_))) %>% 
2025-07-28T13:38:49.920366804Z             mutate(across(matches("vax_date\\w+_3"), ~if_else(vaccine_3_type %in% 
2025-07-28T13:38:49.920367646Z                 "None", NA_Date_, .x))) %>% mutate(across(vax_date_covid_3, 
2025-07-28T13:38:49.920368509Z             ~if_else(vaccine_3_type %in% "None", NA_Date_, pmin(vax_date_Pfizer_3, 
2025-07-28T13:38:49.920369373Z                 vax_date_AstraZeneca_3, vax_date_Moderna_3, na.rm = T)))) %>% 
2025-07-28T13:38:49.920370196Z             mutate(across(vax_date_Pfizer_3, ~if_else(missing_pfizer_3, 
2025-07-28T13:38:49.920370959Z                 NA_Date_, .x))) %>% mutate(across(vax_date_AstraZeneca_3, 
2025-07-28T13:38:49.920371852Z             ~if_else(missing_az_3, NA_Date_, .x))) %>% mutate(across(vax_date_Moderna_3, 
2025-07-28T13:38:49.920372667Z             ~if_else(missing_moderna_3, NA_Date_, .x))) %>% mutate(vax_date_covid_3 = pmin(vax_date_Pfizer_3, 
2025-07-28T13:38:49.920373489Z             vax_date_AstraZeneca_3, vax_date_Moderna_3, na.rm = T)) %>% 
2025-07-28T13:38:49.920374273Z             select(-starts_with("missing"), -matches("vaccine_\\d_type")) %>% 
2025-07-28T13:38:49.920375194Z             mutate(across(vax_date_covid_1, ~if_else(runif(n()) < 
2025-07-28T13:38:49.920376010Z                 0.002, as.Date("01-12-2020"), .x))) %>% mutate(across(vax_date_covid_1, 
2025-07-28T13:38:49.920376936Z             ~if_else(runif(n()) < 0.002, vax_date_covid_2 + 10, 
2025-07-28T13:38:49.920377770Z                 .x))) %>% mutate(across(vax_date_covid_2, ~if_else(runif(n()) < 
2025-07-28T13:38:49.920378617Z             0.002, vax_date_covid_1 + 15, .x))) %>% mutate(modify_mixed_vax = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920379472Z             p = 0.002)) %>% mutate(across(vax_date_Moderna_2, 
2025-07-28T13:38:49.920380249Z             ~if_else(modify_mixed_vax, mixed_vax_threshold - 
2025-07-28T13:38:49.920381079Z                 2, .x))) %>% mutate(across(vax_date_covid_2, 
2025-07-28T13:38:49.920381855Z             ~if_else(modify_mixed_vax, mixed_vax_threshold - 
2025-07-28T13:38:49.920382653Z                 2, .x)))
2025-07-28T13:38:49.920383419Z     }
2025-07-28T13:38:49.920384146Z     else if (cohort == "unvax") {
2025-07-28T13:38:49.920384948Z         print("Redistributing vax_date_covid_1 for unvax cohort")
2025-07-28T13:38:49.920385792Z         df <- df %>% mutate(vax_date_covid_1 = case_when(vax_date_covid_1 > 
2025-07-28T13:38:49.920386725Z             as.Date("2021-12-10") ~ vax_date_covid_1 - 360, TRUE ~ 
2025-07-28T13:38:49.920387550Z             vax_date_covid_1)) %>% mutate(vax_cat_jcvi_group = sample(x = c("12", 
2025-07-28T13:38:49.920388627Z             "11", "10", "09", "08", "07", "06", "05", "04", "03", 
2025-07-28T13:38:49.920390523Z             "02", "01", "99"), size = nrow(.), replace = TRUE, 
2025-07-28T13:38:49.920391397Z             prob = c(rep(0.082, 12), 0.016)))
2025-07-28T13:38:49.920392165Z     }
2025-07-28T13:38:49.920392885Z     df <- df %>% mutate(inex_bin_alive = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920393709Z         p = 0.99)) %>% mutate(inex_bin_6m_reg = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920394540Z         p = 0.99)) %>% mutate(cov_num_age = sample(c(sample(1:17, 
2025-07-28T13:38:49.920395340Z         round(nrow(.) * 0.02), replace = TRUE), sample(111:120, 
2025-07-28T13:38:49.920396164Z         round(nrow(.) * 0.02), replace = TRUE), sample(18:110, 
2025-07-28T13:38:49.920396954Z         nrow(.) - round(nrow(.) * 0.02) * 2, replace = TRUE)))) %>% 
2025-07-28T13:38:49.920397772Z         mutate(qa_num_birth_year = as.numeric(format(as.Date(index_date), 
2025-07-28T13:38:49.920398558Z             "%Y")) - cov_num_age) %>% mutate(cov_cat_sex = sample(x = c("female", 
2025-07-28T13:38:49.920399471Z         "male", "intersex", "unknown"), size = nrow(.), replace = TRUE, 
2025-07-28T13:38:49.920400384Z         prob = c(0.49, 0.49, 0.01, 0.01))) %>% mutate(strat_cat_region = sample(x = c("East", 
2025-07-28T13:38:49.920401271Z         "East Midlands", "London", "North East", "North West", 
2025-07-28T13:38:49.920402171Z         "South East", "South West", "West Midlands", "Yorkshire and The Humber", 
2025-07-28T13:38:49.920403085Z         ""), size = nrow(.), replace = TRUE, prob = c(rep(0.11, 
2025-07-28T13:38:49.920403931Z         9), 0.01))) %>% mutate(cov_cat_imd = sample(x = c("1 (most deprived)", 
2025-07-28T13:38:49.920404770Z         "2", "3", "4", "5 (least deprived)", NA), size = nrow(.), 
2025-07-28T13:38:49.920405743Z         replace = TRUE, prob = c(rep(0.195, 5), 0.025))) %>% 
2025-07-28T13:38:49.920406535Z         mutate(across(starts_with("out_date_"), ~as.Date(ifelse(runif(n()) < 
2025-07-28T13:38:49.920407444Z             0.5, index_date + round((lcd_date - index_date) * 
2025-07-28T13:38:49.920408245Z             runif(n(), min = 0, max = 1)), NA_Date_), format = "%Y-%m-%d", 
2025-07-28T13:38:49.920409078Z             origin = "1970-01-01"))) %>% mutate(across(exp_date_covid, 
2025-07-28T13:38:49.920409948Z         ~as.Date(ifelse(runif(n()) < 0.5, sample(seq(pandemic_start, 
2025-07-28T13:38:49.920410800Z             lcd_date, by = "day"), n(), replace = TRUE), NA_Date_), 
2025-07-28T13:38:49.920411661Z             format = "%Y-%m-%d", origin = "1970-01-01"))) %>% 
2025-07-28T13:38:49.920412548Z         mutate(sub_cat_covidhospital = sample(x = c("non_hospitalised", 
2025-07-28T13:38:49.920413635Z             "hospitalised"), size = nrow(.), replace = TRUE, 
2025-07-28T13:38:49.920416229Z             prob = rep(0.5, 2))) %>% mutate(across(sub_cat_covidhospital, 
2025-07-28T13:38:49.920417683Z         ~if_else(is.na(exp_date_covid), "no_infection", .x))) %>% 
2025-07-28T13:38:49.920418841Z         mutate(sub_bin_covidhistory = rbernoulli(nrow(.), p = 0.05)) %>% 
2025-07-28T13:38:49.920420041Z         mutate(across(qa_num_birth_year, ~if_else(runif(n()) < 
2025-07-28T13:38:49.920421267Z             0.002, as.numeric(""), .x))) %>% mutate(modify_birth_then = rbernoulli(nrow(.), 
2025-07-28T13:38:49.920422433Z         p = 0.002)) %>% mutate(across(qa_num_birth_year, ~if_else(modify_birth_then, 
2025-07-28T13:38:49.920423569Z         2024, .x))) %>% mutate(across(cens_date_death, ~if_else(modify_birth_then, 
2025-07-28T13:38:49.920424739Z         as.Date("2023-03-02"), .x))) %>% mutate(across(qa_num_birth_year, 
2025-07-28T13:38:49.920426403Z         ~if_else(runif(n()) < 0.005, as.numeric(format(Sys.Date() + 
2025-07-28T13:38:49.920427707Z             1000, "%Y")), .x))) %>% mutate(across(cens_date_death, 
2025-07-28T13:38:49.920428960Z         ~if_else(runif(n()) < 0.002, Sys.Date() + 42, .x))) %>% 
2025-07-28T13:38:49.920430644Z         mutate(qa_bin_pregnancy = rbernoulli(nrow(.), p = 0.005)) %>% 
2025-07-28T13:38:49.920431854Z         mutate(qa_bin_hrtcocp = rbernoulli(nrow(.), p = 0.005)) %>% 
2025-07-28T13:38:49.920433133Z         mutate(qa_bin_prostate_cancer = rbernoulli(nrow(.), p = 0.005)) %>% 
2025-07-28T13:38:49.920434569Z         select(-starts_with("modify_"))
2025-07-28T13:38:49.920435784Z }
2025-07-28T13:38:49.920436806Z 
2025-07-28T13:38:49.920438016Z [[2]]$visible
2025-07-28T13:38:49.920439207Z [1] FALSE
2025-07-28T13:38:49.920440335Z 
2025-07-28T13:38:49.920441446Z 
2025-07-28T13:38:49.920442477Z [[3]]
2025-07-28T13:38:49.920443541Z [[3]]$value
2025-07-28T13:38:49.920447169Z function (cohort, describe) 
2025-07-28T13:38:49.920448492Z {
2025-07-28T13:38:49.920449607Z     print("Get column names")
2025-07-28T13:38:49.920451497Z     file_path <- paste0("output/dataset_definition/input_", cohort, 
2025-07-28T13:38:49.920452420Z         ".csv.gz")
2025-07-28T13:38:49.920453234Z     all_cols <- fread(file_path, header = TRUE, sep = ",", nrows = 0, 
2025-07-28T13:38:49.920454205Z         stringsAsFactors = FALSE) %>% names()
2025-07-28T13:38:49.920454988Z     message("Column names found")
2025-07-28T13:38:49.920455776Z     print(all_cols)
2025-07-28T13:38:49.920456501Z     print("Define column classes")
2025-07-28T13:38:49.920457296Z     cat_cols <- c("patient_id", grep("_cat", all_cols, value = TRUE))
2025-07-28T13:38:49.920458204Z     bin_cols <- c(grep("_bin", all_cols, value = TRUE))
2025-07-28T13:38:49.920460309Z     num_cols <- c(grep("_num", all_cols, value = TRUE), grep("vax_jcvi_age_", 
2025-07-28T13:38:49.920461254Z         all_cols, value = TRUE))
2025-07-28T13:38:49.920462010Z     date_cols <- grep("_date", all_cols, value = TRUE)
2025-07-28T13:38:49.920462871Z     message("Column classes identified")
2025-07-28T13:38:49.920463658Z     col_classes <- setNames(c(rep("c", length(cat_cols)), rep("l", 
2025-07-28T13:38:49.920464554Z         length(bin_cols)), rep("d", length(num_cols)), rep("D", 
2025-07-28T13:38:49.920465409Z         length(date_cols))), all_cols[match(c(cat_cols, bin_cols, 
2025-07-28T13:38:49.920466185Z         num_cols, date_cols), all_cols)])
2025-07-28T13:38:49.920466948Z     message("Column classes defined")
2025-07-28T13:38:49.920467739Z     print("Load cohort dataset")
2025-07-28T13:38:49.920468502Z     input <- read_csv(file_path, col_types = col_classes)
2025-07-28T13:38:49.920469266Z     message(paste0("Dataset has been read successfully with N = ", 
2025-07-28T13:38:49.920470085Z         nrow(input), " rows"))
2025-07-28T13:38:49.920470838Z     print("Modify dummy data")
2025-07-28T13:38:49.920471591Z     if (Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")) {
2025-07-28T13:38:49.920472819Z         input <- modify_dummy(input, cohort)
2025-07-28T13:38:49.920473601Z     }
2025-07-28T13:38:49.920474359Z     print("Format dataset columns")
2025-07-28T13:38:49.920475135Z     input <- input %>% mutate(across(all_of(date_cols), ~floor_date(as.Date(., 
2025-07-28T13:38:49.920476028Z         format = "%Y-%m-%d"), unit = "days")), across(contains("_birth_year"), 
2025-07-28T13:38:49.920476942Z         ~as.numeric(.)), across(all_of(num_cols), ~as.numeric(.)), 
2025-07-28T13:38:49.920477730Z         across(all_of(cat_cols), ~as.character(.)))
2025-07-28T13:38:49.920478500Z     print("Describe data")
2025-07-28T13:38:49.920479306Z     if (isTRUE(describe)) {
2025-07-28T13:38:49.920480040Z         describe_data(df = input, name = paste0(cohort, "_raw"))
2025-07-28T13:38:49.920480910Z     }
2025-07-28T13:38:49.920481622Z     print("Remove records with missing patient id")
2025-07-28T13:38:49.920482427Z     input <- input[!is.na(input$patient_id), ]
2025-07-28T13:38:49.920483206Z     message("All records with valid patient IDs retained.")
2025-07-28T13:38:49.920484117Z     print("Make Venn diagram input dataset")
2025-07-28T13:38:49.920484950Z     venn <- input %>% select(starts_with(c("patient_id", "tmp_out_date", 
2025-07-28T13:38:49.920486090Z         "out_date")))
2025-07-28T13:38:49.920486923Z     print("Restrict columns")
2025-07-28T13:38:49.920488512Z     input <- input %>% select(patient_id, starts_with("index_date"), 
2025-07-28T13:38:49.920489404Z         starts_with("end_date_"), starts_with("sub_"), starts_with("exp_"), 
2025-07-28T13:38:49.920490307Z         starts_with("out_"), starts_with("cov_"), starts_with("inex_"), 
2025-07-28T13:38:49.920491162Z         starts_with("cens_"), starts_with("qa_"), starts_with("strat_"), 
2025-07-28T13:38:49.920492064Z         starts_with("vax_date_"), starts_with("vax_cat_"))
2025-07-28T13:38:49.920492934Z     print("Describe files")
2025-07-28T13:38:49.920493731Z     if (isTRUE(describe)) {
2025-07-28T13:38:49.920494481Z         describe_data(df = venn, name = paste0(cohort, "_venn"))
2025-07-28T13:38:49.920495302Z         describe_data(df = input, name = paste0(cohort, "_preprocessed"))
2025-07-28T13:38:49.920496126Z     }
2025-07-28T13:38:49.920496845Z     print("Return data")
2025-07-28T13:38:49.920497598Z     return(list(venn = venn, input = input))
2025-07-28T13:38:49.920499010Z }
2025-07-28T13:38:49.920499730Z 
2025-07-28T13:38:49.920500429Z [[3]]$visible
2025-07-28T13:38:49.920501164Z [1] FALSE
2025-07-28T13:38:49.920501910Z 
2025-07-28T13:38:49.920502622Z 
2025-07-28T13:38:49.920503303Z [[4]]
2025-07-28T13:38:49.920504023Z [[4]]$value
2025-07-28T13:38:49.920701864Z function (input, flow, lcd_date) 
2025-07-28T13:38:49.920708194Z {
2025-07-28T13:38:49.920709487Z     print("Apply quality assurance to all cohorts")
2025-07-28T13:38:49.920710783Z     input <- input[((!is.na(input$cens_date_death)) & (year(input$cens_date_death) >= 
2025-07-28T13:38:49.920712185Z         input$qa_num_birth_year)) | (is.na(input$cens_date_death)), 
2025-07-28T13:38:49.920713345Z         ]
2025-07-28T13:38:49.920714411Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Year of birth is before year of death (if year of death is available)", 
2025-07-28T13:38:49.920715883Z         nrow(input))
2025-07-28T13:38:49.920717044Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920718260Z     input <- input[!is.na(input$qa_num_birth_year) & (input$qa_num_birth_year <= 
2025-07-28T13:38:49.920719633Z         lcd_date), ]
2025-07-28T13:38:49.920720835Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Year of birth is before today (implemented using last data collection date)", 
2025-07-28T13:38:49.920722136Z         nrow(input))
2025-07-28T13:38:49.920723220Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920724384Z     input <- input[(!is.na(input$cens_date_death) & (input$cens_date_death <= 
2025-07-28T13:38:49.920725668Z         lcd_date)) | is.na(input$cens_date_death), ]
2025-07-28T13:38:49.920730794Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Date of death is before today (if year of death is available and implemented using last data collection date)", 
2025-07-28T13:38:49.920732207Z         nrow(input))
2025-07-28T13:38:49.920733268Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920734416Z     input <- input[!(input$cov_cat_sex == "male" & input$qa_bin_pregnancy == 
2025-07-28T13:38:49.920735831Z         TRUE), ]
2025-07-28T13:38:49.920736923Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Men do not have records that contain pregnancy and/or birth codes", 
2025-07-28T13:38:49.920738325Z         nrow(input))
2025-07-28T13:38:49.920739403Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920741089Z     input <- input[!(input$cov_cat_sex == "male" & input$qa_bin_hrtcocp == 
2025-07-28T13:38:49.920741983Z         TRUE), ]
2025-07-28T13:38:49.920742715Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Men do not have records that contain HRT or COCP medication codes", 
2025-07-28T13:38:49.920743640Z         nrow(input))
2025-07-28T13:38:49.920744415Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920745163Z     input <- input[!(input$cov_cat_sex == "female" & input$qa_bin_prostate_cancer == 
2025-07-28T13:38:49.920746040Z         TRUE), ]
2025-07-28T13:38:49.920746773Z     flow[nrow(flow) + 1, ] <- c("Quality assurance: Women do not have records that contain prostate cancer codes", 
2025-07-28T13:38:49.920747644Z         nrow(input))
2025-07-28T13:38:49.920748350Z     print(flow[nrow(flow), ])
2025-07-28T13:38:49.920755411Z     return(list(input = input, flow = flow))
2025-07-28T13:38:49.920756744Z }
2025-07-28T13:38:49.920757997Z 
2025-07-28T13:38:49.920759186Z [[4]]$visible
2025-07-28T13:38:49.920760329Z [1] FALSE
2025-07-28T13:38:49.920761492Z 
2025-07-28T13:38:49.920762524Z 
2025-07-28T13:38:49.920763634Z [[5]]
2025-07-28T13:38:49.920764871Z [[5]]$value
2025-07-28T13:38:49.921322868Z function (input) 
2025-07-28T13:38:49.921331416Z {
2025-07-28T13:38:49.921332755Z     print("Create supporting variable ")
2025-07-28T13:38:49.921333961Z     if (all(c("sub_bin_asthma_recent", "sub_bin_copd_ever") %in% 
2025-07-28T13:38:49.921335321Z         names(input))) {
2025-07-28T13:38:49.921336570Z         input$sup_bin_preex <- (input$sub_bin_asthma_recent | 
2025-07-28T13:38:49.921337948Z             input$sub_bin_copd_ever)
2025-07-28T13:38:49.921339287Z     }
2025-07-28T13:38:49.921340439Z     else {
2025-07-28T13:38:49.921341646Z         warning("One or both variables ('sub_bin_asthma_recent', 'sub_bin_copd_ever') are missing. sup_bin_preex will not be created.")
2025-07-28T13:38:49.921346984Z     }
2025-07-28T13:38:49.921348157Z     print("Handle missing values in cov_cat_sex")
2025-07-28T13:38:49.921349560Z     if ("cov_cat_sex" %in% names(input)) {
2025-07-28T13:38:49.921351613Z         input$cov_cat_sex <- if_else(input$cov_cat_sex %in% c("male", 
2025-07-28T13:38:49.921352635Z             "female"), input$cov_cat_sex, "missing")
2025-07-28T13:38:49.921353611Z         if ("missing" %in% unique(input$cov_cat_sex)) {
2025-07-28T13:38:49.921354452Z             stop("cov_cat_sex contains missing values.")
2025-07-28T13:38:49.921355305Z         }
2025-07-28T13:38:49.921356089Z     }
2025-07-28T13:38:49.921356845Z     print("Handle missing values in cov_cat_imd")
2025-07-28T13:38:49.921357636Z     if ("cov_cat_imd" %in% names(input)) {
2025-07-28T13:38:49.921358436Z         input$cov_cat_imd <- if_else(input$cov_cat_imd %in% c("1 (most deprived)", 
2025-07-28T13:38:49.921359363Z             "2", "3", "4", "5 (least deprived)"), input$cov_cat_imd, 
2025-07-28T13:38:49.921360338Z             "missing")
2025-07-28T13:38:49.921361097Z         if ("missing" %in% unique(input$cov_cat_imd)) {
2025-07-28T13:38:49.921361977Z             stop("cov_cat_imd contains missing values.")
2025-07-28T13:38:49.921362820Z         }
2025-07-28T13:38:49.921363552Z     }
2025-07-28T13:38:49.921364229Z     if ("cov_cat_ethnicity" %in% names(input)) {
2025-07-28T13:38:49.921365055Z         print("Handle missing values in cov_cat_ethnicity")
2025-07-28T13:38:49.921365883Z         input$cov_cat_ethnicity <- if_else(input$cov_cat_ethnicity %in% 
2025-07-28T13:38:49.921366738Z             c("1", "2", "3", "4", "5"), input$cov_cat_ethnicity, 
2025-07-28T13:38:49.921367653Z             "0")
2025-07-28T13:38:49.921368422Z     }
2025-07-28T13:38:49.921369100Z     if ("cov_cat_smoking" %in% names(input)) {
2025-07-28T13:38:49.921369927Z         print("Handle missing values in cov_cat_smoking")
2025-07-28T13:38:49.921370744Z         input$cov_cat_smoking <- if_else(input$cov_cat_smoking %in% 
2025-07-28T13:38:49.921371536Z             c("E", "N", "S"), input$cov_cat_smoking, "M")
2025-07-28T13:38:49.921372450Z     }
2025-07-28T13:38:49.921373187Z     print("Recode missing values in binary variables as FALSE")
2025-07-28T13:38:49.921373996Z     input <- input %>% mutate(across(contains("_bin_"), ~ifelse(. == 
2025-07-28T13:38:49.921374977Z         TRUE, TRUE, FALSE))) %>% mutate(across(contains("_bin_"), 
2025-07-28T13:38:49.921375866Z         ~replace_na(., FALSE)))
2025-07-28T13:38:49.921376648Z     print("Set reference levels for factors")
2025-07-28T13:38:49.921378560Z     cat_factors <- colnames(input)[grepl("_cat_", colnames(input))]
2025-07-28T13:38:49.921379832Z     input[, cat_factors] <- lapply(input[, cat_factors], function(x) factor(x, 
2025-07-28T13:38:49.921380681Z         ordered = FALSE))
2025-07-28T13:38:49.921381448Z     if ("sub_cat_covidhospital" %in% names(input)) {
2025-07-28T13:38:49.921382266Z         print("Set reference level for variable: sub_cat_covidhospital")
2025-07-28T13:38:49.921383085Z         input$sub_cat_covidhospital <- ordered(input$sub_cat_covidhospital, 
2025-07-28T13:38:49.921383939Z             levels = c("no_infection", "non_hospitalised", "hospitalised"))
2025-07-28T13:38:49.921384869Z     }
2025-07-28T13:38:49.921385584Z     if ("cov_cat_ethnicity" %in% names(input)) {
2025-07-28T13:38:49.921386374Z         print("Set reference level for variable: cov_cat_ethnicity")
2025-07-28T13:38:49.921387188Z         levels(input$cov_cat_ethnicity) <- list(Missing = "0", 
2025-07-28T13:38:49.921388080Z             White = "1", Mixed = "2", Asian = "3", Black = "4", 
2025-07-28T13:38:49.921388988Z             Other = "5")
2025-07-28T13:38:49.921389738Z         input$cov_cat_ethnicity <- relevel(input$cov_cat_ethnicity, 
2025-07-28T13:38:49.921390563Z             ref = "White")
2025-07-28T13:38:49.921391364Z     }
2025-07-28T13:38:49.921392071Z     if ("cov_cat_imd" %in% names(input)) {
2025-07-28T13:38:49.921392876Z         print("Set reference level for variable: cov_cat_imd")
2025-07-28T13:38:49.921393699Z         input$cov_cat_imd <- ordered(input$cov_cat_imd, levels = c("1 (most deprived)", 
2025-07-28T13:38:49.921394590Z             "2", "3", "4", "5 (least deprived)"))
2025-07-28T13:38:49.921395501Z     }
2025-07-28T13:38:49.921396197Z     if ("strat_cat_region" %in% names(input)) {
2025-07-28T13:38:49.921397071Z         print("Set reference level for variable: strat_cat_region")
2025-07-28T13:38:49.921398349Z         input$strat_cat_region <- factor(input$strat_cat_region, 
2025-07-28T13:38:49.921399622Z             levels = c("East", "East Midlands", "London", "North East", 
2025-07-28T13:38:49.921401007Z                 "North West", "South East", "South West", "West Midlands", 
2025-07-28T13:38:49.921402231Z                 "Yorkshire and The Humber"))
2025-07-28T13:38:49.921403466Z         input$strat_cat_region <- relevel(input$strat_cat_region, 
2025-07-28T13:38:49.921404653Z             ref = "East")
2025-07-28T13:38:49.921405726Z     }
2025-07-28T13:38:49.921406731Z     if ("cov_cat_smoking" %in% names(input)) {
2025-07-28T13:38:49.921407867Z         print("Set reference level for variable: cov_cat_smoking")
2025-07-28T13:38:49.921409123Z         levels(input$cov_cat_smoking) <- list(`Ever smoker` = "E", 
2025-07-28T13:38:49.921411655Z             Missing = "M", `Never smoker` = "N", `Current smoker` = "S")
2025-07-28T13:38:49.921412989Z         input$cov_cat_smoking <- ordered(input$cov_cat_smoking, 
2025-07-28T13:38:49.921414198Z             levels = c("Never smoker", "Ever smoker", "Current smoker", 
2025-07-28T13:38:49.921415620Z                 "Missing"))
2025-07-28T13:38:49.921416870Z     }
2025-07-28T13:38:49.921417954Z     if ("cov_cat_sex" %in% names(input)) {
2025-07-28T13:38:49.921419146Z         print("Set reference level for variable: cov_cat_sex")
2025-07-28T13:38:49.921420552Z         levels(input$cov_cat_sex) <- list(Female = "female", 
2025-07-28T13:38:49.921421827Z             Male = "male")
2025-07-28T13:38:49.921423006Z         input$cov_cat_sex <- relevel(input$cov_cat_sex, ref = "Female")
2025-07-28T13:38:49.921424280Z     }
2025-07-28T13:38:49.921425387Z     if ("vax_cat_jcvi_group" %in% names(input)) {
2025-07-28T13:38:49.921426700Z         print("Set reference level for variable: vax_cat_jcvi_group")
2025-07-28T13:38:49.921428639Z         input$vax_cat_jcvi_group <- ordered(input$vax_cat_jcvi_group, 
2025-07-28T13:38:49.921429523Z             levels = c("12", "11", "10", "09", "08", "07", "06", 
2025-07-28T13:38:49.921430407Z                 "05", "04", "03", "02", "01", "99"))
2025-07-28T13:38:49.921431353Z     }
2025-07-28T13:38:49.921432056Z     print("Set reference level for binaries")
2025-07-28T13:38:49.921432869Z     bin_factors <- colnames(input)[grepl("cov_bin_", colnames(input))]
2025-07-28T13:38:49.921433730Z     input[, bin_factors] <- lapply(input[, bin_factors], function(x) factor(x, 
2025-07-28T13:38:49.921434549Z         levels = c("FALSE", "TRUE")))
2025-07-28T13:38:49.921435487Z     return(input)
2025-07-28T13:38:49.921436230Z }
2025-07-28T13:38:49.921436945Z 
2025-07-28T13:38:49.921437658Z [[5]]$visible
2025-07-28T13:38:49.921438409Z [1] FALSE
2025-07-28T13:38:49.921439150Z 
2025-07-28T13:38:49.921439853Z 
2025-07-28T13:38:49.921440520Z [1] "Specify command arguments"
2025-07-28T13:38:49.921441362Z [1] 2
2025-07-28T13:38:49.952719689Z [1] "Get column names"
2025-07-28T13:38:50.016456841Z  [1] "patient_id"                      "inex_bin_6m_reg"                
2025-07-28T13:38:50.016470397Z  [3] "inex_bin_alive"                  "cens_date_dereg"                
2025-07-28T13:38:50.016472292Z  [5] "exp_date_covid"                  "qa_bin_prostate_cancer"         
2025-07-28T13:38:50.016473781Z  [7] "qa_bin_pregnancy"                "qa_num_birth_year"              
2025-07-28T13:38:50.016480666Z  [9] "qa_bin_hrtcocp"                  "tmp_out_date_ami_gp"            
2025-07-28T13:38:50.016482096Z [11] "tmp_out_date_ami_apc"            "tmp_out_date_ami_death"         
2025-07-28T13:38:50.016483689Z [13] "out_date_ami"                    "tmp_out_date_stroke_sahhs_gp"   
2025-07-28T13:38:50.016484699Z [15] "tmp_out_date_stroke_sahhs_apc"   "tmp_out_date_stroke_sahhs_death"
2025-07-28T13:38:50.016485690Z [17] "out_date_stroke_sahhs"           "strat_cat_region"               
2025-07-28T13:38:50.016486778Z [19] "cov_num_age"                     "cov_cat_sex"                    
2025-07-28T13:38:50.016487734Z [21] "cov_cat_ethnicity"               "cov_cat_imd"                    
2025-07-28T13:38:50.016488674Z [23] "cov_cat_smoking"                 "cov_bin_carehome"               
2025-07-28T13:38:50.016489586Z [25] "cov_num_consrate2019"            "cov_bin_hcworker"               
2025-07-28T13:38:50.016490532Z [27] "cov_bin_dementia"                "cov_bin_liver_disease"          
2025-07-28T13:38:50.016491460Z [29] "cov_bin_ckd"                     "cov_bin_cancer"                 
2025-07-28T13:38:50.016492387Z [31] "cov_bin_hypertension"            "cov_bin_diabetes"               
2025-07-28T13:38:50.016493262Z [33] "cov_bin_obesity"                 "cov_bin_copd"                   
2025-07-28T13:38:50.016494196Z [35] "cov_bin_ami"                     "cov_bin_depression"             
2025-07-28T13:38:50.016495145Z [37] "cov_bin_stroke_all"              "cov_bin_other_ae"               
2025-07-28T13:38:50.016496050Z [39] "cov_bin_vte"                     "cov_bin_hf"                     
2025-07-28T13:38:50.016496967Z [41] "cov_bin_angina"                  "cov_bin_lipidmed"               
2025-07-28T13:38:50.016497871Z [43] "cov_bin_antiplatelet"            "cov_bin_anticoagulant"          
2025-07-28T13:38:50.016498775Z [45] "cov_bin_cocp"                    "cov_bin_hrt"                    
2025-07-28T13:38:50.016499663Z [47] "sub_bin_covidhistory"            "sub_cat_covidhospital"          
2025-07-28T13:38:50.016500541Z [49] "vax_cat_jcvi_group"              "vax_date_eligible"              
2025-07-28T13:38:50.016501468Z [51] "vax_date_covid_1"                "vax_date_covid_2"               
2025-07-28T13:38:50.016502362Z [53] "vax_date_covid_3"                "vax_date_Pfizer_1"              
2025-07-28T13:38:50.016503252Z [55] "vax_date_Pfizer_2"               "vax_date_Pfizer_3"              
2025-07-28T13:38:50.016504976Z [57] "vax_date_AstraZeneca_1"          "vax_date_AstraZeneca_2"         
2025-07-28T13:38:50.016505927Z [59] "vax_date_AstraZeneca_3"          "vax_date_Moderna_1"             
2025-07-28T13:38:50.016506821Z [61] "vax_date_Moderna_2"              "vax_date_Moderna_3"             
2025-07-28T13:38:50.016507737Z [63] "cens_date_death"                 "index_date"                     
2025-07-28T13:38:50.016513163Z [65] "end_date_exposure"               "end_date_outcome"               
2025-07-28T13:38:50.016514157Z [1] "Define column classes"
2025-07-28T13:38:50.016453672Z Column names found
2025-07-28T13:38:50.016519332Z [1] "Load cohort dataset"
2025-07-28T13:38:50.016522706Z Column classes identified
2025-07-28T13:38:50.016523514Z Column classes defined
2025-07-28T13:38:50.071710412Z [1] "Modify dummy data"
2025-07-28T13:38:50.071710024Z Dataset has been read successfully with N = 5000 rows
2025-07-28T13:38:50.253306843Z [1] "Format dataset columns"
2025-07-28T13:38:50.275361133Z [1] "Describe data"
2025-07-28T13:38:51.335406042Z output/describe/prevax_raw.txt written successfully.
2025-07-28T13:38:51.335430193Z [1] "Remove records with missing patient id"
2025-07-28T13:38:51.336930411Z All records with valid patient IDs retained.
2025-07-28T13:38:51.336952408Z [1] "Make Venn diagram input dataset"
2025-07-28T13:38:51.340561674Z [1] "Restrict columns"
2025-07-28T13:38:51.352892089Z [1] "Describe files"
2025-07-28T13:38:51.378528060Z output/describe/prevax_venn.txt written successfully.
2025-07-28T13:38:51.663187437Z output/describe/prevax_preprocessed.txt written successfully.
2025-07-28T13:38:51.663206978Z [1] "Return data"
2025-07-28T13:38:51.669188678Z Venn diagram data saved successfully
2025-07-28T13:38:51.669197695Z Preprocess dataset has N = 5000 rows
2025-07-28T13:38:51.669339738Z [1] "Specify flow table"
2025-07-28T13:38:51.669604417Z [1] "Call inclusion criteria function"
2025-07-28T13:38:51.717387691Z [1] "Apply inclusion criteria to all cohorts"
2025-07-28T13:38:51.719364971Z                          Description    N
2025-07-28T13:38:51.719373620Z 2 Inclusion criteria: Alive at index 4947
2025-07-28T13:38:51.720933880Z                                         Description    N
2025-07-28T13:38:51.720941690Z 3 Inclusion criteria: Known age 18 or over at index 4848
2025-07-28T13:38:51.722519984Z                                           Description    N
2025-07-28T13:38:51.722527968Z 4 Inclusion criteria: Known age 110 or under at index 4748
2025-07-28T13:38:51.727388829Z                                                           Description    N
2025-07-28T13:38:51.727404848Z 5 Inclusion criteria: Known sex, recorded as male or female, at index 4662
2025-07-28T13:38:51.728811556Z                              Description    N
2025-07-28T13:38:51.728825795Z 6 Inclusion criteria: Known IMD at index 4538
2025-07-28T13:38:51.730059004Z                                 Description    N
2025-07-28T13:38:51.730062259Z 7 Inclusion criteria: Known region at index 4487
2025-07-28T13:38:51.731246645Z                                                                                                                     Description
2025-07-28T13:38:51.731249516Z 8 Inclusion criteria: Continuous registration with the same practice for at least six months up to and including the index date
2025-07-28T13:38:51.731250643Z      N
2025-07-28T13:38:51.731252158Z 8 4438
2025-07-28T13:38:51.732417595Z                                                Description    N
2025-07-28T13:38:51.732420374Z 9 Inclusion criteria: Index date is before cohort end date 4438
2025-07-28T13:38:51.732421379Z [1] "Apply cohort specific inclusion criteria"
2025-07-28T13:38:51.732486103Z [1] "Call quality assurance function"
2025-07-28T13:38:51.751922310Z [1] "Apply quality assurance to all cohorts"
2025-07-28T13:38:51.753426211Z                                                                                 Description
2025-07-28T13:38:51.753435047Z 10 Quality assurance: Year of birth is before year of death (if year of death is available)
2025-07-28T13:38:51.753436342Z       N
2025-07-28T13:38:51.753437415Z 10 4426
2025-07-28T13:38:51.754499659Z                                                                                       Description
2025-07-28T13:38:51.754507637Z 11 Quality assurance: Year of birth is before today (implemented using last data collection date)
2025-07-28T13:38:51.754508979Z       N
2025-07-28T13:38:51.754509892Z 11 4420
2025-07-28T13:38:51.755537986Z                                                                                                                         Description
2025-07-28T13:38:51.755546087Z 12 Quality assurance: Date of death is before today (if year of death is available and implemented using last data collection date)
2025-07-28T13:38:51.755547291Z       N
2025-07-28T13:38:51.755548152Z 12 4297
2025-07-28T13:38:51.756530149Z                                                                             Description
2025-07-28T13:38:51.756538298Z 13 Quality assurance: Men do not have records that contain pregnancy and/or birth codes
2025-07-28T13:38:51.756539524Z       N
2025-07-28T13:38:51.756540423Z 13 4291
2025-07-28T13:38:51.757557840Z                                                                             Description
2025-07-28T13:38:51.757565750Z 14 Quality assurance: Men do not have records that contain HRT or COCP medication codes
2025-07-28T13:38:51.757566977Z       N
2025-07-28T13:38:51.757568008Z 14 4285
2025-07-28T13:38:51.758558415Z                                                                        Description
2025-07-28T13:38:51.758566135Z 15 Quality assurance: Women do not have records that contain prostate cancer codes
2025-07-28T13:38:51.758567322Z       N
2025-07-28T13:38:51.758568150Z 15 4275
2025-07-28T13:38:51.758577168Z [1] "Call reference function"
2025-07-28T13:38:51.789844246Z [1] "Create supporting variable "
2025-07-28T13:38:51.789864179Z [1] "Handle missing values in cov_cat_sex"
2025-07-28T13:38:51.791563746Z [1] "Handle missing values in cov_cat_imd"
2025-07-28T13:38:51.791680147Z [1] "Handle missing values in cov_cat_ethnicity"
2025-07-28T13:38:51.792005421Z [1] "Handle missing values in cov_cat_smoking"
2025-07-28T13:38:51.792231183Z [1] "Recode missing values in binary variables as FALSE"
2025-07-28T13:38:51.803085716Z [1] "Set reference levels for factors"
2025-07-28T13:38:51.804051512Z [1] "Set reference level for variable: sub_cat_covidhospital"
2025-07-28T13:38:51.804059289Z [1] "Set reference level for variable: cov_cat_ethnicity"
2025-07-28T13:38:51.804456640Z [1] "Set reference level for variable: cov_cat_imd"
2025-07-28T13:38:51.804464572Z [1] "Set reference level for variable: strat_cat_region"
2025-07-28T13:38:51.804706108Z [1] "Set reference level for variable: cov_cat_smoking"
2025-07-28T13:38:51.804938705Z [1] "Set reference level for variable: cov_cat_sex"
2025-07-28T13:38:51.805084977Z [1] "Set reference level for variable: vax_cat_jcvi_group"
2025-07-28T13:38:51.805161403Z [1] "Set reference level for binaries"
2025-07-28T13:38:51.813901732Z Warning message:
2025-07-28T13:38:51.813910216Z In ref(qa_results$input) :
2025-07-28T13:38:51.813911651Z   One or both variables ('sub_bin_asthma_recent', 'sub_bin_copd_ever') are missing. sup_bin_preex will not be created.
2025-07-28T13:38:51.813918558Z [1] "Saving flow data after Inclusion criteria"
2025-07-28T13:38:51.815234768Z [1] "Performing redaction"
2025-07-28T13:38:51.815494806Z [1] "Saving rounded flow data after Inclusion criteria"
2025-07-28T13:38:51.815812512Z [1] "Saving dataset after preprocessing, applying inclusion criteria, quality assurance checks, and setting reference levels"


job_definition_id: vloiv5uaexqpivo4
job_definition_request_id: 4204ecd689
docker_image_id: sha256:ef02d2a106a19e7d6a5d5a9b895969058ce5a89c6535f13c96d1d73fe995c657
exit_code: 0
created_at: 1753709846
completed_at: 1753709933
status_message: Completed successfully

outputs:
  output/dataset_clean/flow-cohort_prevax-midpoint6.csv  - moderately_sensitive
  output/dataset_clean/flow-cohort_prevax.csv            - moderately_sensitive
  output/dataset_clean/input_prevax_clean.rds            - highly_sensitive    
  output/dataset_clean/venn-cohort_prevax.rds            - highly_sensitive    
  output/describe/prevax_preprocessed.txt                - moderately_sensitive
  output/describe/prevax_raw.txt                         - moderately_sensitive
  output/describe/prevax_venn.txt                        - moderately_sensitive
